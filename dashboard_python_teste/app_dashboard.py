# Importando as bibliotecas necess√°rias
import streamlit as st
import dash
from dash import dcc, html, Input, Output
import pandas as pd
import numpy as np
import plotly.express as px
import locale

# Configurando o padr√£o brasileiro para formata√ß√£o de n√∫meros
locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')

# Criando os dados simulados
transacoes = pd.DataFrame({
    'Data_Transa√ß√£o': pd.date_range(start='2024-01-01', periods=1000, freq='D'),
    'ID_Cliente': np.random.randint(1, 101, size=1000),
    'Tipo_Cart√£o': np.random.choice(['Gold', 'Platinum', 'Black'], size=1000, p=[0.5, 0.3, 0.2]),
    'Valor_Transa√ß√£o': np.random.uniform(50, 2000, size=1000).round(2),
    'Categoria_Gasto': np.random.choice(['Alimenta√ß√£o', 'Viagem', 'Compras Online', 'Educa√ß√£o'], size=1000),
    'Limite_Cart√£o': np.random.uniform(5000, 20000, size=1000).round(-2)
})

clientes = pd.DataFrame({
    'ID_Cliente': range(1, 101),
    'Idade': np.random.randint(18, 65, size=100),
    'Renda_Mensal': np.random.uniform(2000, 15000, size=100).round(-2),
    'Status_Inadimplente': np.random.choice([0, 1], size=100, p=[0.85, 0.15]),
    'Tipo_Cart√£o': np.random.choice(['Gold', 'Platinum', 'Black'], size=100, p=[0.5, 0.3, 0.2]),
    'Regi√£o': np.random.choice(['Norte', 'Sul', 'Sudeste', 'Nordeste'], size=100)
})

beneficios = pd.DataFrame({
    'ID_Cliente': range(1, 101),
    'Participa_Cashback': np.random.choice([0, 1], size=100, p=[0.4, 0.6]),
    'Participa_Pontos': np.random.choice([0, 1], size=100, p=[0.3, 0.7]),
    'Saldo_Pontos': np.random.randint(0, 5000, size=100)
})

transacoes_completas = pd.merge(transacoes, beneficios, on='ID_Cliente')

# Criando o app Dash
app = dash.Dash(__name__)
app.title = "Dashboard Profissional"

# Fun√ß√£o para calcular m√©tricas gerais
def calcular_metricas():
    total_transacoes = transacoes['Valor_Transa√ß√£o'].sum()
    media_gasto = transacoes['Valor_Transa√ß√£o'].mean()
    total_inadimplentes = clientes['Status_Inadimplente'].sum()
    total_cashback = transacoes_completas[transacoes_completas['Participa_Cashback'] == 1]['Valor_Transa√ß√£o'].sum()
    return total_transacoes, media_gasto, total_inadimplentes, total_cashback

# Layout do Dashboard
# Layout do Dashboard
app.layout = html.Div([
    # T√≠tulo do Dashboard
    html.Div([
        html.H1("Dashboard de Cart√µes de Cr√©dito", style={'text-align': 'center', 'color': 'white'}),
        html.P("An√°lise de transa√ß√µes, inadimpl√™ncia e benef√≠cios", style={'text-align': 'center', 'color': 'white'})
    ], style={'background-color': '#003B70', 'padding': '10px'}),
    
    # Abas para organizar o conte√∫do
    dcc.Tabs([
        # Aba 1: Gr√°ficos
        dcc.Tab(label='An√°lises Gr√°ficas', children=[
            # Dropdown para sele√ß√£o de tipo de cart√£o
            html.Div([
                html.Label("Selecione o Tipo de Cart√£o:", style={'font-size': '16px', 'margin-top': '20px'}),
                dcc.Dropdown(
                    id='tipo_cartao',
                    options=[
                        {'label': 'Todos', 'value': 'Todos'},
                        {'label': 'Gold', 'value': 'Gold'},
                        {'label': 'Platinum', 'value': 'Platinum'},
                        {'label': 'Black', 'value': 'Black'}
                    ],
                    value='Todos',  # Valor padr√£o
                    style={'width': '50%', 'margin': '20px auto'}
                )
            ], style={'text-align': 'center'}),

            # Cart√µes de M√©tricas
            html.Div([
                html.Div([
                    html.H4("Total de Transa√ß√µes üí≥", style={'text-align': 'center', 'color': 'black'}),
                    html.H3(f"R$ {calcular_metricas()[0]:,.2f}".replace('.', ',').replace(',', '.', 1), style={'text-align': 'center', 'color': '#003B70'}),
                    html.P("Valor total movimentado por todas as transa√ß√µes no per√≠odo.", style={'text-align': 'center', 'font-size': '12px'}),
                ], className='card', style={'background-color': '#E8F4FF', 'border': '1px solid #003B70', 'padding': '15px', 'border-radius': '10px'}),
                html.Div([
                    html.H4("Gasto M√©dio por Transa√ß√£o üìä", style={'text-align': 'center', 'color': 'black'}),
                    html.H3(f"R$ {calcular_metricas()[1]:,.2f}".replace('.', ',').replace(',', '.', 1), style={'text-align': 'center', 'color': '#007ACC'}),
                    html.P("M√©dia do valor gasto em cada transa√ß√£o.", style={'text-align': 'center', 'font-size': '12px'}),
                ], className='card', style={'background-color': '#F0F8FF', 'border': '1px solid #007ACC', 'padding': '15px', 'border-radius': '10px'}),
                html.Div([
                    html.H4("Total de Inadimplentes üö®", style={'text-align': 'center', 'color': 'black'}),
                    html.H3(f"{calcular_metricas()[2]:,}".replace(',', '.'), style={'text-align': 'center', 'color': '#CC0000'}),
                    html.P("N√∫mero de clientes inadimplentes no per√≠odo analisado.", style={'text-align': 'center', 'font-size': '12px'}),
                ], className='card', style={'background-color': '#FFE8E8', 'border': '1px solid #CC0000', 'padding': '15px', 'border-radius': '10px'}),
                html.Div([
                    html.H4("Total de Cashback Usado ü§ë", style={'text-align': 'center', 'color': 'black'}),
                    html.H3(f"R$ {calcular_metricas()[3]:,.2f}".replace('.', ',').replace(',', '.', 1), style={'text-align': 'center', 'color': '#008000'}),
                    html.P("Valor total resgatado em benef√≠cios de cashback.", style={'text-align': 'center', 'font-size': '12px'}),
                ], className='card', style={'background-color': '#E8FFE8', 'border': '1px solid #008000', 'padding': '15px', 'border-radius': '10px'}),
            ], style={'display': 'flex', 'justify-content': 'space-around', 'padding': '20px'}),

            # Gr√°ficos
            html.Div([
                dcc.Graph(id='grafico_categorias'),
                dcc.Graph(id='grafico_inadimplencia'),
                dcc.Graph(id='grafico_beneficios'),
            ], style={'padding': '20px'})
        ], style={'background-color': '#F9F9F9'}),

        # Aba 2: Observa√ß√µes e Sugest√µes
        dcc.Tab(label='Observa√ß√µes e Sugest√µes', children=[
            html.Div([
                html.H3("Observa√ß√µes e Sugest√µes", style={'text-align': 'center', 'margin-top': '30px'}),
                html.Ul([
                    html.Li("Clientes Gold t√™m maior concentra√ß√£o de gastos em 'Alimenta√ß√£o'. Sugerimos criar parcerias com redes de restaurantes e oferecer cashback dedicado a essas transa√ß√µes."),
                    html.Li("Clientes Black t√™m maior gasto em 'Viagem'. Isso sugere a cria√ß√£o de promo√ß√µes em hot√©is e companhias a√©reas para refor√ßar a experi√™ncia premium."),
                    html.Li("A regi√£o Sudeste concentra 70% dos inadimplentes. Uma recomenda√ß√£o seria realizar an√°lises de cr√©dito mais rigorosas nessa regi√£o e oferecer programas educativos sobre gest√£o financeira."),
                    html.Li("60% dos clientes participantes de cashback gastam, em m√©dia, 25% mais por transa√ß√£o. Sugerimos expandir a campanha de cashback para outras categorias de gasto."),
                    html.Li("A maioria dos clientes acumula pontos, mas n√£o os resgata. √â recomend√°vel enviar alertas autom√°ticos sobre vencimento de pontos e benef√≠cios associados."),
                ], style={'padding': '20px', 'font-size': '16px', 'line-height': '1.8'})
            ], style={'padding': '20px'})
        ], style={'background-color': '#F9F9F9'}),
    ], style={'border': '1px solid #D3D3D3', 'border-radius': '10px', 'overflow': 'hidden'}),
])


# Callbacks para os gr√°ficos
@app.callback(
    Output('grafico_categorias', 'figure'),
    Input('tipo_cartao', 'value')
)
def update_grafico_categorias(tipo_cartao):
    dados = transacoes if tipo_cartao == 'Todos' else transacoes[transacoes['Tipo_Cart√£o'] == tipo_cartao]
    categoria_gasto = dados.groupby('Categoria_Gasto')['Valor_Transa√ß√£o'].sum().reset_index()
    fig = px.bar(categoria_gasto, x='Categoria_Gasto', y='Valor_Transa√ß√£o',
                 title="Gastos por Categoria",
                 labels={'Categoria_Gasto': 'Categoria', 'Valor_Transa√ß√£o': 'Total (R$)'},
                 text_auto=True,
                 color_discrete_sequence=['#003B70'])
    fig.update_layout(title_x=0.5)
    return fig

@app.callback(
    Output('grafico_inadimplencia', 'figure'),
    Input('tipo_cartao', 'value')
)
def update_grafico_inadimplencia(tipo_cartao):
    inadimplentes = clientes[clientes['Status_Inadimplente'] == 1]
    if tipo_cartao != 'Todos':
        inadimplentes = inadimplentes[inadimplentes['Tipo_Cart√£o'] == tipo_cartao]
    inadimplencia_regiao = inadimplentes.groupby('Regi√£o')['ID_Cliente'].count().reset_index()
    fig = px.pie(inadimplencia_regiao, values='ID_Cliente', names='Regi√£o',
                 title="Distribui√ß√£o de Inadimpl√™ncia por Regi√£o",
                 labels={'ID_Cliente': 'Clientes'},
                 color_discrete_sequence=px.colors.sequential.Blues)
    fig.update_layout(title_x=0.5)
    return fig

@app.callback(
    Output('grafico_beneficios', 'figure'),
    Input('tipo_cartao', 'value')
)
def update_grafico_beneficios(tipo_cartao):
    dados = transacoes_completas if tipo_cartao == 'Todos' else transacoes_completas[transacoes_completas['Tipo_Cart√£o'] == tipo_cartao]
    beneficios_uso = dados.groupby(['Participa_Cashback', 'Participa_Pontos'])['Valor_Transa√ß√£o'].sum().reset_index()
    beneficios_uso['Beneficio'] = beneficios_uso.apply(
        lambda x: f"Cashback: {'Sim' if x['Participa_Cashback'] else 'N√£o'}, Pontos: {'Sim' if x['Participa_Pontos'] else 'N√£o'}", axis=1)
    fig = px.bar(beneficios_uso, x='Beneficio', y='Valor_Transa√ß√£o',
                 title="Uso de Benef√≠cios",
                 labels={'Valor_Transa√ß√£o': 'Total (R$)', 'Beneficio': 'Benef√≠cio'},
                 text_auto=True,
                 color_discrete_sequence=['#003B70'])
    fig.update_layout(title_x=0.5)
    return fig

# Executa o servidor
if __name__ == '__main__':
    app.run_server(debug=True)
